es:
  seeds:
    chapters:
      basic_concepts:
        lessons:
          introduction_java:
            lesson_contents:
              welcome_java:
                content:
                  title: 'Bienvenido a Java'
                  desc: '<p>Java es un lenguaje de programación moderno y de alto nivel diseñado a principios de los años 90 por Sun Microsystems, y actualmente propiedad de Oracle.</p><p>Java es independiente de la plataforma, lo que significa que sólo hay que escribir el programa una vez para poder ejecutarlo en varias plataformas diferentes. Java es portátil, robusto y dinámico, con la capacidad de adaptarse a las necesidades de prácticamente cualquier tipo de aplicación. Java le garantiza que podrá escribir una vez y ejecutar en cualquier lugar</p>'
              java:
                content:
                  title: 'Java'
                  desc: '<p>Más de 3.000 millones de dispositivos funcionan con Java.</p><p>Java se utiliza para desarrollar aplicaciones para el sistema operativo Android de Google, diversas aplicaciones de escritorio, como reproductores multimedia, programas antivirus, aplicaciones web, aplicaciones empresariales (por ejemplo, bancarias), ¡y muchas más!</p>'
          a_hello_world_program:
            lesson_contents:
              your_first_java_program:
                content:
                  title: 'Tu primer programa Java'
                  desc: '<p>Empecemos por crear un programa sencillo que imprima "Hola Mundo" en la pantalla.</p><div><code><p>class MyClass {</p><p style="text-indent: 1%">public static void main(String[ ] args) {</p><p style="text-indent: 2%">System.out.println("Hello World");</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>En Java, cada línea de código que pueda ejecutarse debe estar dentro de una clase. En nuestro ejemplo, hemos llamado a la clase MyClass. Aprenderás más sobre las clases en los próximos módulos.</p><p>En Java, cada aplicación tiene un punto de entrada, o un punto de partida, que es un método llamado main. Junto con main, las palabras clave public y static también se explicarán más adelante.</p><p>A modo de resumen:<br/> - Todo programa en Java debe tener una clase.<br/> - Todo programa en Java comienza con el método main.</p>'
              the_main_method:
                content:
                  title: 'El método main'
                  desc: '<p>Para ejecutar nuestro programa, el método principal debe ser idéntico a esta firma:</p><div><code><p>public static void main(String[ ] args)</p></code></div><p>- público: cualquiera puede acceder a él<br/> - static: el método puede ejecutarse sin crear una instancia de la clase que contiene el método principal<br/>- void: el método no devuelve ningún valor<br/> - main: el nombre del método<br/></p><p>Por ejemplo, el siguiente código declara un método llamado test, que no devuelve nada y no tiene parámetros:</p><div><code><p>void test()</p></code></div><p>Los parámetros del método se declaran dentro de los paréntesis que siguen al nombre del método. <br/>En el caso de main, es un array de cadenas llamado args. Lo usaremos en nuestra próxima lección, así que no te preocupes si no lo entiendes todo ahora.</p>'
              system_out_println:
                content:
                  title: 'System.out.println()'
                  desc: '<p>A continuación está el cuerpo del método main, delimitado entre llaves:</p><div><code><p>{</p> <p>System.out.println("Hello World!");</p><p>}</p></code></div><p>El método println imprime una línea de texto en la pantalla. <br/>La clase System y su flujo de salida se utilizan para acceder al método println.</p><p>En las clases, métodos y otras estructuras de control de flujo, el código siempre se encierra entre llaves { }.</p>'
              semicolon_in_java:
                content:
                  title: 'Punto y coma en Java'
                  desc: '<p>Puedes pasar un texto diferente como parámetro al método println para imprimirlo.</p><div><code><p>class MyClass {</p> <p style="text-indent: 1%">public static void main(String[ ] args) {</p> <p style="text-indent: 2%">System.out.println("I am learning Java");</p> <p style="text-indent: 1%">}</p><p>}</p></code></div><p>En Java, cada declaración de código debe terminar con un punto y coma.</p><p>Recuerde: no use punto y coma después de las declaraciones de métodos y clases que siguen con el cuerpo definido usando las llaves.</p>'
          java_comments:
            lesson_contents:
              comments:
                content:
                  title: 'Comentarios'
                  desc: '<p>El propósito de incluir comentarios en su código es explicar lo que el código está haciendo.</p><p>Java admite comentarios de una o varias líneas. Todos los caracteres que aparecen dentro de un comentario son ignorados por el compilador de Java.</p><p>Un comentario de una línea comienza con dos barras inclinadas y continúa hasta el final de la línea.</p><p>Por ejemplo:</p><div><code><p>// este es un comentario de una sola línea</p><p>x = 5; // un comentario de una sola línea después del código</p></code></div><p>Añadir comentarios a medida que se escribe el código es una buena práctica, ya que proporcionan aclaración y comprensión cuando se necesita volver a consultarlo, así como para otros que puedan necesitar leerlo.</p>'
              multiline_comments:
                content:
                  title: 'Comentarios multilínea'
                  desc: '<p>Java también admite comentarios que abarcan varias líneas.<br/>Este tipo de comentario comienza con una barra inclinada seguida de un asterisco y termina con un asterisco seguido de una barra inclinada.<br/></p><p>Por ejemplo:</p><div><code><p>/* Esto también es un</p><p>comentario que abarca</p><p>varias líneas */</p></code></div><p>Tenga en cuenta que Java no admite los comentarios multilínea anidados.<br/>Sin embargo, se pueden anidar comentarios de una línea dentro de comentarios de varias líneas.</p><div><code><p>/* Este es un comentario de una sola línea:</p><p>// un comentario de una sola línea</p><p>*/</p></code></div><p>Otro nombre para un Multi-Line comment (comentario de varias líneas) es un Block comment.</p>'
              documentation_comments:
                content:
                  title: 'Comentarios de documentación'
                  desc: '<p>Los comentarios de documentación son comentarios especiales que tienen la apariencia de los comentarios de varias líneas, con la diferencia de que generan documentación externa de su código fuente. Empiezan con una barra diagonal seguida de dos asteriscos y terminan con un asterisco seguido de una barra diagonal.</p><p>Por ejemplo:</p><div><code><p>/** This is a documentation comment */</p><p>/** This is also a</p><p>documentation comment */</p></code></div><p>Javadoc es una herramienta que viene con el JDK y se utiliza para generar la documentación del código Java en formato HTML a partir del código fuente Java que tiene la documentación necesaria en un formato predefinido.</p><p>Cuando un comentario de documentación comienza con más de dos asteriscos, Javadoc asume que usted quiere crear una "caja" alrededor del comentario en el código fuente. <br/>Simplemente ignora los asteriscos adicionales.</p><p>Por ejemplo:</p><div><code><p>/**********************</p><p>Este es el inicio de un método</p><p>***********************/</p></code></div><p>Esto mantendrá sólo el texto "Este es el comienzo de un método" para la documentación.</p>'
          variables:
            lesson_contents:
              variables:
                content:
                  title: 'Variables'
                  desc: '<p>Las variables almacenan datos para su procesamiento.</p><p>A una variable se le asigna un nombre (o identificador), como área, edad, altura y similares. <br/>El nombre identifica de forma única cada variable, asignando un valor a la variable y recuperando el valor almacenado.</p><p>Las variables tienen tipos. Algunos ejemplos:<br/>- int: para los enteros (números enteros) como 123 y -456<br/>- double: para números de punto flotante o reales con puntos decimales opcionales y partes fraccionarias en notaciones fijas o científicas, como 3,1416, -55,66.<br/>- String: para textos como "Hola" o "¡Buenos días!". Las cadenas de texto van entre comillas dobles.</p><p>Puede declarar una variable de un tipo y asignarle un valor.</p><p>Ejemplo:</p><div><code><p>String name = "David";</p></code></div><p>Esto crea una variable llamada nombre de tipo String, y le asigna el valor "David".</p><p>Es importante tener en cuenta que una variable está asociada a un tipo, y sólo es capaz de almacenar valores de ese tipo concreto. <br/>Por ejemplo, una variable int puede almacenar valores enteros, como 123; pero no puede almacenar números reales, como 12,34, o textos, como "Hola".</p><p>Ejemplos de declaraciones de variables:</p><div><code><p>class MyClass {</p><p style="text-indent: 1%">public static void main(String[ ] args) {</p><p style="text-indent: 2%">String name ="David";</p><p style="text-indent: 2%">int age = 42;</p><p style="text-indent: 2%">double score =15.9;</p><p style="text-indent: 2%">char group = "Z";</p><p style="text-indent: 2%">}</p><p>}</p></code></div><p>char significa carácter y contiene un solo carácter.</p><p>Otro tipo es el Boolean, que sólo tiene dos valores posibles: verdadero y falso.<br/>Este tipo de datos se utiliza para banderas simples que registran condiciones verdadero/falso.</p><p>Por ejemplo:</p><div><code><p>boolean online = true;</p></code></div><p>Puede utilizar una lista separada por comas para declarar más de una variable del tipo especificado. Ejemplo: int a = 42, b = 11;</p>'
          obtaining_user_input:
            lesson_contents:
              obtaining_user_input:
                content:
                  title: 'Obteniendo entrada del usuario'
                  desc: '<p>Aunque Java proporciona muchos métodos diferentes para obtener la entrada del usuario, el objeto Scanner es el más común, y quizás el más fácil de implementar. </br>Importe la clase Scanner para utilizar el objeto Scanner, como se ve aquí:</p><div><code><p>import java.util.Scanner;</p></code></div><p>Para utilizar la clase Scanner, cree una instancia de la clase utilizando la siguiente sintaxis:</p><div><code><p>Scanner myVar = new Scanner(System.in);</p></code></div><p>Ahora puede leer en diferentes tipos de datos de entrada que el usuario introduce. Aquí hay algunos métodos que están disponibles a través de la clase Scanner:</p><p><ul><li>Leer un byte - nextByte()</li><li>Leer un short - nextShort()</li><li>Leer un int - nextInt()</li><li>Leer un long - nextLong()</li><li>Leer un float - nextFloat()</li><li>Leer un double - nextDouble()</li><li>Leer un boolean - nextBoolean()</li><li>Leer una línea completa - nextLine()</li><li>Leer una palabra - next()</li></ul></p><p>Ejemplo de un programa utilizado para obtener la entrada del usuario:</p><div><code><p>import java.util.Scanner;</p><br/><p>class MyClass {</p><p style="text-indent: 1%">public static void main(String[ ] args) {</p><p style="text-indent: 2%">Scanner myVar = new Scanner(System.in);</p><p style="text-indent: 2%">System.out.println(myVar.nextLine());</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Esto esperará a que el usuario introduzca algo e imprimirá esa entrada.<br/>El código puede parecer complejo, pero lo entenderás todo en las próximas lecciones.</p>'
          primitive_operators:
            lesson_contents:
              mathematical_operators:
                content:
                  title: 'Los operadores matemáticos'
                  desc: '<p>Java proporciona un rico conjunto de operadores para utilizar en la manipulación de variables. Un valor utilizado en cualquier lado de un operador se llama operando.</p><p>Por ejemplo, en la expresión siguiente, los números 6 y 3 son operandos del operador más:</p><div><code><p>int x = 6 + 3;</p></code></div><p>Operadores aritméticos de Java:</p><p><ul><li>+ suma</li><li>- resta</li><li>* multiplicación</li><li>/ división</li><li>% módulo</li></ul></p><p>Los operadores aritméticos se utilizan en las expresiones matemáticas del mismo modo que en las ecuaciones algebraicas.</p>'
              addition:
                content:
                  title: 'Suma'
                  desc: '<p>El operador + suma dos valores, como dos constantes, una constante y una variable, o una variable y una variable. He aquí algunos ejemplos de adición:</p><div><code><p>int sum1 = 50 + 10;<br/>int sum2 = sum1 + 66;<br/>int sum3 = sum2 + sum2;<br/></p></code></div>'
              subtract:
                content:
                  title: 'Resta'
                  desc: '<p>El operador - resta un valor de otro.</p><div><code><p>int res1 = 1000 - 10;<br/>int res2 = res1 - 5;<br/>int res3 = res1 - res2;<br/></p></code></div>'
              multiplication:
                content:
                  title: 'Multiplicación'
                  desc: '<p>El operador * multiplica dos valores.</p><div><code><p>int mul1 = 1000 * 2;<br/>int mul2 = mul1 * 10;<br/>int mul3 = mul1 * mul2;<br/></p></code></div>'
              division:
                content:
                  title: 'División'
                  desc: '<p>El operador / divide un valor entre otro.</p><div><code><p>int div1 = 1000 / 5;<br/>int div2 = div1 / 2;<br/>int div3 = div1 / div2;<br/></p></code></div><p>En el ejemplo anterior, el resultado de la ecuación de la división será un número entero, ya que se utiliza int como tipo de datos. Puede utilizar double para recuperar un valor con un punto decimal.</p>'
              module:
                content:
                  title: 'Módulo'
                  desc: '<p>La operación matemática de módulo (o resto) realiza una división entera de un valor por otro, y devuelve el resto de esa división.<br/>El operador de la operación de módulo es el carácter de porcentaje (%).</p><p>Ejemplo</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int value = 23;</p><p style="text-indent: 2%">int res = value % 6;</p><p style="text-indent: 2%">System.out.println(res);</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Al dividir 23 entre 6 se obtiene un cociente de 3, con un resto de 5. Así, el valor de 5 se asigna a la variable res.</p>'
          increase_decrease:
            lesson_contents:
              increment_operators:
                content:
                  title: 'Operadores de incremento'
                  desc: '<p>Un operador de incremento o decremento proporciona una manera más conveniente y compacta de aumentar o disminuir el valor de una variable en uno.<br/>Por ejemplo, la sentencia x=x+1; puede simplificarse a ++x;</p><p>Ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int test = 5;</p><p style="text-indent: 2%">++test;</p><p style="text-indent: 2%">System.out.println(test);</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>El operador de decremento (--) se utiliza para disminuir el valor de una variable en uno.</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int test = 5;</p><p style="text-indent: 2%">--test;</p><p style="text-indent: 2%">System.out.println(test);</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Utilice este operador con precaución para evitar errores de cálculo.</p>'
              prefix_suffix:
                content:
                  title: 'Prefijo y sufijo'
                  desc: '<p>Se pueden utilizar dos formas, prefijo y postfijo, con los operadores de incremento y decremento.<br/>Con la forma de prefijo, el operador aparece antes del operando, mientras que en la forma de sufijo, el operador aparece después del operando. A continuación se explica cómo funcionan las dos formas:</p><p>Prefijo: Incrementa el valor de la variable y utiliza el nuevo valor en la expresión.</p><p>Ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 2%">public static void main(String[] args) {</p><p style="text-indent: 3%">int x = 34;</p><p style="text-indent: 3%">int y = ++x;</p><p style="text-indent: 3%">System.out.println(y);</p><p style="text-indent: 2%">}</p><p>}</p></div></code><p>El valor de x se incrementa primero a 35, y luego se asigna a y, por lo que los valores de x e y son ahora 35.</p><p>Sufijo: El valor de la variable se utiliza primero en la expresión y luego se incrementa.</p><p>Sufijo: El valor de la variable se utiliza primero en la expresión y luego se incrementa.</p><div><code><p>public class Program {</p><p style="text-indent: 2%">public static void main(String[] args) {</p><p style="text-indent: 3%">int x = 34;</p><p style="text-indent: 3%">int y = x++;</p><p style="text-indent: 3%">System.out.println(y);</p><p style="text-indent: 2%">}</p><p>}</p></div></code><p>Primero se asigna “x” a “y”, y luego se incrementa en uno. Por lo tanto, “x” se convierte en 35, mientras que a “y” se le asigna el valor de 34.</p><p>Lo mismo ocurre con el operador de decremento.</p>'
              assignment_operators:
                content:
                  title: 'Operadores de asignación'
                  desc: '<p>Ya conoce el operador de asignación (=), que asigna un valor a una variable.</p><div><code><p>int value = 5;</p></code></div><p>Esto asignó el valor 5 a una variable llamada valor de tipo int.</p><p>Java proporciona una serie de operadores de asignación para facilitar la escritura de código.</p><h4>Suma y asignación (+=):</h4><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int num1 = 4;</p><p style="text-indent: 2%">int num2 = 8;</p><p style="text-indent: 2%">num2 += num1; // num2 = num2 + num1;</p><p style="text-indent: 2%">// num2 es 12 y num1 es 4</p><p style="text-indent: 2%">System.out.println(num2);</p><p style="text-indent: 1%">}</p><p>}</p></code></div><h4>Sustracción y asignación (-=):</h4><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int num1 = 4;</p><p style="text-indent: 2%">int num2 = 8;</p><p style="text-indent: 2%">num2 -= num1; // num2 = num2 - num1;</p><p style="text-indent: 2%">// num2 es 4 y num1 es 4</p><p style="text-indent: 2%">System.out.println(num2);</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Del mismo modo, Java admite la multiplicación y la asignación (*=), la división y la asignación (/=), y el resto y la asignación (%=).</p>'
          strings:
            lesson_contents:
              strings:
                content: 
                  title: 'Strings'
                  desc: '<p>Un string (cadena de texto) es un objeto que representa una secuencia de caracteres.</p>
                  <p>Por ejemplo, "Hola" es una cadena de 4 caracteres.</p>
                  <p>Por ejemplo:</p>
                  <div><code><p>String s = "HolaMundo"; </p></code></div>
                  <pSe permite definir una cadena vacía. Por ejemplo, String str = "";</p>
                  '
              string_concatenation:
                content:
                  title: 'Concatenación de Strings'
                  desc: '<p>El operador + (suma) entre cadenas de texto las junta para formar una nueva cadena de texto. Este proceso se llama concatenación.<br/>La cadena de texto resultante es la primera unida a la segunda.</p><p>Por ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">String firstName, lastName;</p><p style="text-indent: 2%">firstName = "David";</p><p style="text-indent: 2%">lastName = "Williams";</p><p style="text-indent: 2%">System.out.println("My name is " + firstName +" "+lastName);</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>El tipo de datos char representa un solo carácter.</p>'
      conditionals_loops:
        lessons:
          conditional_statements:
            lesson_contents:
              decision_making:
                content:
                  title: 'Toma de decisiones'
                  desc: '<p>Las declaraciones condicionales son usadas para ejecutar acciones diferentes basadas en condiciones diferentes.</p><p>La declaración if es una de las declaraciones condicionales más frecuente utilizadas.</p><p>Si la expresión condicional de la declaración if evalúa a true (verdadero), el bloque de código dentro de la declaración if es ejecutado. Si la expresión evalúa a false (falso), el primer conjunto de código después del final de la declaración if (después de las llaves de cierre) es ejecutado.</p><p>Sintaxis:</p><div><code><p>if (condition) {</p><p style="text-indent: 1%">//Se ejecuta cuando la condición es verdadera</p><p>}</p></code></div><p>Cualquier de los siguientes operadores de comparación pueden ser utilizados para formar la condición:</p><p><ul><li>< menor que</li><li>> mayor que</li><li>!= no igual que</li><li>== igual que</li><li><= menor o igual que</li><li>>= mayor o igual que</li></ul></p><p>Por ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int x = 7;</p><p style="text-indent: 2%">if(x < 42) {</p><p style="text-indent: 3%">System.out.println("Hi");</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Recuerda que necesitas utilizas dos signos de igual (==) para probar equidad, ya que un solo signo de igual es el operador asignación.</p>'
              if_else_statements:
                content:
                  title: 'Las declaraciones if... else'
                  desc: '<p>Una declaración if puede venir seguida por una declaración opcional else, la cual se ejecuta cuando la condición se evalúa como falsa.</p><p>Por ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int age = 30;</p><p style="text-indent: 2%">if (age < 16) {</p><p style="text-indent: 3%">System.out.println("Too Young");</p><p style="text-indent: 2%">} else {</p><p style="text-indent: 3%">System.out.println("Welcome!");</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code>/<div><p>Como "age" es igual a 30, la condición en la declaración if evalúa a falso y la declaración else es ejecutada.</p>'
          nested_if_statements:
            lesson_contents:
              nested_if_statements:
                content:
                  title: 'Declaraciones if anidadas'
                  desc: '<p>Puedes utilizar una declaración if-else dentro de otra declaración if o else.</p><p>Por ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int age = 25;</p><p style="text-indent: 2%">if(age > 0) {</p><p style="text-indent: 3%">if(age > 16) {</p><p style="text-indent: 4%">System.out.println("Welcome!");</p><p style="text-indent: 3%">} else {</p><p style="text-indent: 4%">System.out.println("Too Young");</p><p style="text-indent: 3%">}</p><p style="text-indent: 2%">} else {</p><p style="text-indent: 3%">System.out.println("Error");</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Puedes anidar tantas declaraciones if-else como quieras.</p>'
          else_if_statement:
            lesson_contents:
              else_if_statement:
                content:
                  title: 'La declaración else if'
                  desc: '<p>En lugar de utilizar declaraciones if-else anidadas, puedes utilizar la declaración else if para validar varias condiciones.</p><p>Por ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int age = 25;</p><p style="text-indent: 2%">if(age <= 0) {</p><p style="text-indent: 3%">System.out.println("Error");</p><p style="text-indent: 2%">} else if(age <= 16) {</p><p style="text-indent: 3%">System.out.println("Too Young");</p><p style="text-indent: 2%">} else if(age < 100) {</p><p style="text-indent: 3%">System.out.println("Welcome!");</p><p style="text-indent: 2%">} else {</p><p style="text-indent: 3%">System.out.println("Really?");</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</code></div><p>Este código validará la condición para evaluar a verdadero y ejecutar las declaraciones dentro de ese bloque.</p>'            
          logical_statements:
            lesson_contents:
              logical_operators:
                content:
                  title: 'Operadores lógicos'
                  desc: '<p>Los operadores lógicos son utilizados para combinar varias condiciones.</p><p>Digamos que quieres que tu programa imprima "Welcome!" sólo cuando la variable age sea mayor que 18 y la variable money sea mayor que 500.<br/>Una manera de lograr esto es usando declaraciones if anidadas:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int age = 22;</p><p style="text-indent: 2%">int money = 800;</p><p style="text-indent: 2%">if (age > 18) {</p><p style="text-indent: 3%">if (money > 500) {</p><p style="text-indent: 4%">System.out.println("Welcome!");</p><p style="text-indent: 3%">}</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Sin embargo, utilizando el operador lógico AND (&&) es una mejor manera:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int age = 22;</p><p style="text-indent: 2%">int money = 800;</p><p style="text-indent: 2%">if (age > 18 && money > 500) {</p><p style="text-indent: 3%">System.out.println("Welcome!");</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Si ambos operandos del operador AND son verdaderos, entonces la condición resulta verdadera.</p>'
              or_operator:
                content:
                  title: 'El operador OR'
                  desc: '<p>El operador OR (||) valida si cualquiera de las condiciones es verdadera. <br/>La condición resulta verdadera, si cualquier de los operandos evalúa a verdadero.</p><p>Por ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int age = 25;</p><p style="text-indent: 2%">int money = 100;</p><p style="text-indent: 2%">if (age > 18 || money > 500) {</p><p style="text-indent: 3%">System.out.println("Welcome!");</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>El código anterior imprimirá "Welcome!" si "age" es mayor que 18 ó si "money" es mayor que 500.</p><p>El operador lógico NOT (!) es utilizado para revertir el estado lógico de su operando.<br/> Si una condición es verdadera, el operador lógico NOT la convertirá en falsa.</p><p>Ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int age = 25;</p><p style="text-indent: 2%">if(!(age > 18)) {</p><p style="text-indent: 3%">System.out.println("Too Young");</p><p style="text-indent: 2%">} else {</p><p style="text-indent: 3%">System.out.println("Welcome");</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>!(age > 18) se lee como "si age NO es mayor que 18".</p>'                    
          switch_statement:
            lesson_contents:
              switch_statement:
                content:
                  title: 'La declaración switch'
                  desc: '<p>Una declaración switch válida una variable por igualdad contra una lista de valores. Cada valor es llamado un case, y la variable que está siendo evaluada es comparada contra cada case.</p><p>Sintaxis:</p><div><code><p>switch (expression) {</p><p style="text-indent: 1%">case value1 :</p><p style="text-indent: 2%">//Declaraciones</p><p style="text-indent: 2%">break; //opcional</p><p style="text-indent: 1%">case value2 :</p><p style="text-indent: 2%">//Declaraciones</p><p style="text-indent: 2%">break; //opcional</p><p style="text-indent: 2%">//Puede tener cualquier número de declaraciones de caso.</p><p style="text-indent: 1%">default : //opcional</p><p style="text-indent: 2%">//Declaraciones</p><p>}</p></code></div><p><ul><li>Cuando la variable que está siendo evaluada es igual que un case, las declaraciones que siguen a ese case serán ejecutadas hasta que una declaración break es alcanzada.</li><li>Cuando una declaración break es alcanzada, el switch finaliza y el flujo de control salta a la siguiente línea después de la declaración switch.</li><li>No todos los case necesitan contener un break. Si no aparece un break, el flujo de control seguirá a través de los cases subsiguientes hasta que se alcance un break.</li></ul></p><p>El siguiente ejemplo valida day contra un conjunto de valores e imprime un mensaje correspondiente.</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int day = 3;</p><p style="text-indent: 2%">switch(day) {</p><p style="text-indent: 3%">case 1:</p><p style="text-indent: 4%">System.out.println("Monday");</p><p style="text-indent: 4%">break;</p><p style="text-indent: 3%">case 2:</p><p style="text-indent: 4%">System.out.println("Tuesday");</p><p style="text-indent: 4%">break;</p><p style="text-indent: 3%">case 3:</p><p style="text-indent: 4%">System.out.println("Wednesday");</p><p style="text-indent: 4%">break;</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Puedes tener cualquier número de declaraciones case dentro de un switch. Cada case es seguido por el valor a comparar y dos puntos.</p>'
              default_statement:
                content:
                  title: 'La declaración default'
                  desc: '<p>Una declaración switch puede tener un case default opcional.<br/>La declaración default puede ser utilizada para realizar una actividad cuando ningunos de los cases es igualado.</p><p>Por ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int day = 3;</p><p style="text-indent: 2%">switch(day) {</p><p style="text-indent: 3%">case 6:</p><p style="text-indent: 4%">System.out.println("Saturday");</p><p style="text-indent: 4%">break;</p><p style="text-indent: 3%">case 7:</p><p style="text-indent: 4%">System.out.println("Sunday");</p><p style="text-indent: 4%">break;</p><p style="text-indent: 3%">default:</p><p style="text-indent: 4%">System.out.println("Weekday");</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>No se necesita un break en el case default, ya que siempre es la última declaración en el switch.</p>'
              switch_expression:
                content:
                  title: 'La expresión switch'
                  desc: '<p>La expresión switch permite múltiples valores separados por comas por caso y devuelve un valor para todo el bloque de caso-switch.</p><p>Por ejemplo: </p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int day = 2;</p><p style="text-indent: 2%">String dayType  = switch(day) {</p><p style="text-indent: 3%">case 1, 2, 3, 4, 5 -> "Working day";</p><p style="text-indent: 3%">case 6, 7 -> "Weekend";</p><p style="text-indent: 3%">default -> "Invalid day";</p><p style="text-indent: 3%">};</p><p style="text-indent: 2%">System.out.println(dayType);</p><p style="text-indent: 1%">}</p><p>}</p></p></code></div><p>La expresión switch hace que el bloque del caso-switch sea mucho más corta y no utiliza una declaración break.</p><p>Ten en cuenta la abreviatura -> después de los casos.</p>'                                   
          loops_while:
            lesson_contents:
              loops_while:
                content:
                  title: 'Bucles while'
                  desc: '<p>Un bucle (loop) permite ejecutar repetidamente una declaración o grupo de declaraciones.</p><p>Un bucle while ejecuta repetidamente una declaración siempre que una condición dada sea verdadera.</p><p>Ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int x = 3;</p><p style="text-indent: 2%">while(x > 0) {</p><p style="text-indent: 3%">System.out.println(x);</p><p style="text-indent: 3%">x--;</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>El bucle while valida la condición x > 0. Si evalúa a verdadero (true), ejecutará las declaraciones dentro de su cuerpo. Luego valida la condición nuevamente y se repite el proceso.</p><p>Fíjate en la declaración x--. Esta disminuye a "x" cada vez que el bucle es ejecutado y hace que el bucle se detenga cuando "x" llega a 0.<br/>Sin esa declaración, el bucle se ejecutaría sin fin.</p><p>Cuando la expresión es probada y el resultado sea falso (false), el cuerpo del bucle es omitido y la primera declaración después del bucle while es ejecutada.</p><p>Ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int x = 6;</p><p style="text-indent: 2%">while( x < 10 ){</p><p style="text-indent: 3%">System.out.println(x);</p><p style="text-indent: 3%">x++;</p><p style="text-indent: 2%">}</p><p style="text-indent: 2%">System.out.println("Loop ended");</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Fíjate que el último método print se encuentra fuera del scope(ámbito) while.</p>'          
          loops_for:
            lesson_contents:
              decisiloops_foron_making:
                content:
                  title: 'Bucles for'
                  desc: '<p>Otra estructura de bucle es el bucle for. Un bucle for te permite escribir eficientemente un bucle que necesita ser ejecutado un número específico de veces.</p><p>Sintaxis:</p><div><code><p>for (initialization; condition; increment/decrement) {</p><p style="text-indent: 1%">statement(s)</p><p>}</p></code></div><p>Inicialización: Esta expresión se ejecuta sólo una vez al comienzo del bucle.<br/>Condición: Es evaluada cada vez que itera el bucle. El bucle ejecuta la declaración repetidamente, hasta que esta condición retorne falso.<br/>Incremento/Decremento: Se ejecuta después de cada iteración del bucle.</p><p>El siguiente ejemplo imprime los números del 1 al 5.</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">for(int x = 1; x <=5; x++) {</p><p style="text-indent: 3%">System.out.println(x);</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Este código inicializa "x" con el valor de 1 y repetidamente se imprime el valor de "x" hasta que la condición x<=5 resulte falsa. En cada iteración, la declaración x++ es ejecutada, incrementando x en uno.</p><p>Fíjate en el punto y coma (;) después de la inicialización y la condición en la sintaxis.</p><p>Puedes tener cualquier tipo de condición y cualquier tipo de incremento en el bucle for.</p><p>El siguiente ejemplo imprime sólo los valores pares entre 0 y 10:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">for(int x=0; x<=10; x=x+2) {</p><p style="text-indent: 3%">System.out.println(x);</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Un bucle for es mejor cuando son conocidos los números de inicio y fin.</p>'         
          loops_do_while:
            lesson_contents:
              loops_do_while:
                content:
                  title: 'Bucles do ...while'
                  desc: '<p>Un bucle do...while es similar a un bucle while, excepto que en un bucle do...while está garantizado que será ejecutado al menos una vez.</p><p>Ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int x = 1;</p><p style="text-indent: 2%">do {</p><p style="text-indent: 3%">System.out.println(x);</p><p style="text-indent: 3%">x++;</p><p style="text-indent: 2%">} while(x < 5);</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Fíjate que la condición aparece al final del bucle, por lo que las declaraciones en el bucle se ejecutan una vez antes de ser evaluada.</p><p>Incluso con una condición falsa, el código será ejecutado una vez.</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int x = 1;</p><p style="text-indent: 2%">do {</p><p style="text-indent: 3%">System.out.println(x);</p><p style="text-indent: 3%">x++;</p><p style="text-indent: 2%">} while(x < 0);</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Fíjate que en los loops do...while, while sólo es la condición y no tiene un body (cuerpo) por sí mismo.</p>'                            
              loop_control_statements:
                content:
                  title: 'Declaraciones de control de bucles'
                  desc: '<p>Las declaraciones break y continue cambian el flujo de ejecución del bucle.<br>La declaración break finaliza la ejecución del bucle y transfiere la ejecución a la declaración que sigue inmediatamente al bucle.</p><p>Ejemplo:</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">int x = 1;</p><p style="text-indent: 2%">while(x > 0) {</p><p style="text-indent: 3%">System.out.println(x);</p><p style="text-indent: 3%">if(x == 4) {</p><p style="text-indent: 4%">break;</p><p style="text-indent: 3%">}</p><p style="text-indent: 3%">x++;</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>La declaración continue produce que el bucle omita el resto de sus declaraciones y evalúe nuevamente su condición antes de reiterar.  En otras palabras, hace que el bucle salte a su próxima iteración.</p><div><code><p>public class Program {</p><p style="text-indent: 1%">public static void main(String[] args) {</p><p style="text-indent: 2%">for(int x=10; x<=40; x=x+10) {</p><p style="text-indent: 3%">if(x == 30) {</p><p style="text-indent: 4%">continue;</p><p style="text-indent: 3%">}</p><p style="text-indent: 3%">System.out.println(x);</p><p style="text-indent: 2%">}</p><p style="text-indent: 1%">}</p><p>}</p></code></div><p>Como puedes ver, el código anterior salta el valor de 30, tal y como es indicado por la declaración continue.</p>'
      arrays:
      classes_objects:
